@article{ijhpca2019cmp,
 abstract = { With the recent advent of many-core architectures such as chip multiprocessors (CMPs), the number of processing units accessing a global shared memory is constantly increasing. Co-scheduling techniques are used to improve application throughput on such architectures, but sharing resources often generates critical interferences. In this article, we focus on the interferences in the last level of cache (LLC) and use the Cache Allocation Technology (CAT) recently provided by Intel to partition the LLC and give each co-scheduled application their own cache area. We consider m iterative HPC applications running concurrently and answer to the following questions: (i) How to precisely model the behavior of these applications on the cache-partitioned platform? and (ii) how many cores and cache fractions should be assigned to each application to maximize the platform efficiency? Here, platform efficiency is defined as maximizing the performance either globally, or as guaranteeing a fixed ratio of iterations per second for each application. Through extensive experiments using CAT, we demonstrate the impact of cache partitioning when multiple HPC applications are co-scheduled onto CMP platforms. },
 author = {Aupy, Guillaume and Benoit, Anne and Goglin, Brice and Pottier, Lo√Øc and Robert, Yves},
 doi = {10.1177/1094342019846956},
 eprint = {https://doi.org/10.1177/1094342019846956},
 journal = {International Journal of High Performance Computing Applications},
 keywords = {mine,ensl},
 month = {04},
 number = {0},
 pages = {0},
 title = {Co-scheduling HPC workloads on cache-partitioned CMP platforms},
 url = {https://doi.org/10.1177/1094342019846956},
 volume = {0},
 year = {2019}
}

